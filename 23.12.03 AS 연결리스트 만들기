#include<stdio.h>
#include<stdlib.h>
#include<windows.h>

typedef struct Node
{
    int data;
    struct Node* next;
}D_Node;

// 함수 선언
void addFirstNode(D_Node** head, int data);                                 // 1번 --완료   12월 3일 확인
void addLastNode(D_Node** head, int data);                                  // 2번 --완료   12월 3일 확인
void addBeforeNode(D_Node* selectedNode, int data);                         // 3번 --완료   12월 3일 확인
void addAfterNode(D_Node* selectedNode, int data);                          // 4번 --완료   12월 3일 확인
void deleteFirstNode(D_Node** head);                                        // 5번 --완료   12월 3일 확인
void deleteLastNode(D_Node** head);                                         // 6번 --완료   12월 3일 확인
void deleteSearchNode(D_Node** head, int position);                         // 7번 --완료   12월 3일 확인
void deleteALLNode(D_Node** head);                                          // 8번 --완료   12월 3일 확인
void ModifyNode(D_Node* head);                                              // 9번 --완료   12월 3일 확인
void PrintSearchNode(D_Node* head, int position2);                          // 10번 --완료  12월 3일 확인
void printList(D_Node* head);                                               // 11번 --완료   12월 3일 확인
void LinearSearch(D_Node* head, int position4);                             // 12번 --완료   12월 3일 확인  // 노드 시작 1부터임 0아님
void MultipleLinearSearch(D_Node* head, int searchData);                    // 13번 --완료   12월 3일 확인  // 노드 시작 1
int binarySearch(D_Node* head, int searchData);                             // 14번 --완료   12월 3일 확인  // 노드 시작 1 하나 숫자 찾는거
void multipleBinarySearch(D_Node* head, int searchData);                    // 15번  //문제 모든 값의 위치를 출력함
void bubbleSort(D_Node** head);                                             // 16번 --완료 확인
void insertionSort(D_Node** head);                                          // 17번 --완료 확인
void selectionSort(D_Node** head);                                          // 18번 --완료 확인

// 12번
// 단일 선형 탐색
// 순차적으로 데이터를 검사하여 원하는 값을 찾는 간단한 탐색 알고리즘이다.
// 동작 방법으로는 알고리즘이 시작점에서 시작하여 각 항목을 차례대로
// 검사하고, 원하는 값을 찾거나 전체 데이터를 검사할 때까지 진행
// 송쌤이 말해준데로 운 안좋으면 1부터 n까지 가서 n번 돌수도
// 하지만 운좋게 1에서 2까지 가서 답을 찾을 수도 있음.
//
// 13번
// 다중 선형 탐색
// 하나 이상의 조건을 충족하는 모든 값을 찾는 탐색 알고리즘이다.
// 동작 방법으로는 단일 선행과 유사, 하지만 조건을 충족하는 모든 값을 찾아
// 리스트나 집랍 등의 형태로 반환
//
// 14번
// 단일 이진 탐색 -- 정렬이 된 상태여야 가능한거 아닌가?
// 정렬된 배열에서 중간 값을 기준으로 탐색 범위를 반으로 줄여가며 특정
// 값을 찾는 알고리즘이다.
// 중간 값과 찾고자 하는 값을 비교하여 찾고자 하는 값이 중간 값보다 작으면
// 왼쪽 부분을, 크면 오른쪽 부분을 탐색
// 
// 15번
// 다중 이진 탐색 -- 얘도 정렬이 된 상태여야 가능한데?
// 정렬된 배열에서 특정 값을 가진 모든 요소의 인덱스를 찾는 알고리즘이다.
// 단일 이진 탐색과 유사, 하지만 여러 번 반복하여 중복된 값들을 찾는다.
//
// 16번
// 버블 소팅
// 인접한 두 원소를 비교하면서 필요에 따라 서로 교환하여 리스트를 정렬 알고리즘
// 가장 큰or작은 원소가 리스트 끝으로 이동.ㅇㅇ
// 리스트를 순회하면서 인접한 두 원소를 비교하고, 순서가 잘못 되면 교환
// 끝까지 반복해 정렬
// 
// 17번
// 삽입 정렬
// 현재 원소를 정렬된 부분에 삽입하는 방식으로 리스트를 정렬하는 알고리즘
// 정렬되지 않은 부분의 원소를 하나씩 선택하여 이미 정렬된 부분에
// 삽입하면서 정렬
//
// 18번
// 선택 정렬
// 주어진 리스트에서 최솟값or최댓값을 선택하여 정렬되지 않은 부분의
// 첫 번째 원소와 교환하는 방식으로 리스트를 정렬하는 알고리즘
// 정렬되지 않은 부분에서 최솟값을 찾아 정렬되지 않은 부분의 첫 번째
// 원소와 교환 

int main()
{
    D_Node* head = NULL;                                                    // 연결 리스트의 헤드 포인터 초기화
    D_Node* selectedNode = NULL;                                            //선택할 노드 포인터 초기화

    int select;
    long long data;


    while (1)
    {
        printf("-----이용하실 서비스를 선택하세요!-----\n");
        printf("1. 앞 노드 데이터 추가.\n");
        printf("2. 뒤 노드 데이터 추가.\n");
        printf("3. 기준 노드 앞 데이터 추가.\n");
        printf("4. 기준 노드 뒤 추가.\n");
        printf("5. 앞 노드 데이터 삭제.\n");
        printf("6. 뒤 노드 데이터 삭제.\n");
        printf("7. 임의 위치 데이터 삭제.\n");
        printf("8. 모든 노드 데이터 삭제.\n");
        printf("9. 임의 노드 데이터 수정.\n");
        printf("10. 임의 노드 데이터 값 읽기.\n");
        printf("11. 노드 순회하기.\n");
        printf("12. 단일 선형 탐색.\n");
        printf("13. 다중 선형 탐색.\n");
        printf("14. 단일 이진 탐색.\n");
        printf("15. 다중 이진 탐색.\n");
        printf("16. 거품 정렬.\n");
        printf("17. 삽입 정렬.\n");
        printf("18. 선택 정렬.\n");
        printf("19. 프로그램을 종료합니다.\n");
        printf("번호를 입력해 주세요 : ");
        scanf_s("%d", &select);
        printf("\n\n");

        if (select == 1)
        {
            // 앞 노드 데이터 추가
            printf("추가할 데이터를 입력하세요 :  ");
            // scanf ... !=1 은 정수가 아닌 값이 입력되었을때 검사한다.
            // 숫자가 아닌 다른 것을 입력 했을때 참이 됌.
            // 추가로 scanf는 정수가 입력되면 1 아니면 0을 반환함.
            // 즉 1이 아니다? 그러면 입력 버퍼 지워
            if (scanf("%lld", &data) != 1)
            {
                printf("잘못된 값을 입력 했습니다\n");
                while (getchar() != '\n');
                continue;
            }
            else
            {
                addFirstNode(&head, data);
                printf("현재 연결 리스트: ");
                printList(head);
                printf("\n");
            }
            system("cls");
        }

        else if (select == 2)
        {
            // 뒤 노드 데이터 추가
            printf("추가할 데이터를 입력하세요 :  ");
            if (scanf("%lld", &data) != 1)
            {
                printf("잘못된 값을 입력 했습니다\n");
                while (getchar() != '\n');
                continue;
            }
            else
            {
                addLastNode(&head, data);
                printf("현재 연결 리스트: ");
                printList(head);
                printf("\n");
            }
            system("cls");
        }

        else if (select == 3)
        {
            // 기준 노드 앞 데이터 추가
            printf("찾을 데이터를 입력하세요 :  ");
            long long searchData;
            scanf("%lld", &searchData);

            printf("추가할 데이터를 입력하세요 :  ");
            if (scanf("%ld", &data) != 1)
            {
                printf("잘못된 값을 입력 했습니다\n");
                while (getchar() != '\n');
                continue;
            }
            else
            {
                addBeforeNode(&head, searchData, data);
                printf("현재 연결 리스트: ");
                printList(head);
                printf("\n");
            }
            system("cls");
        }

        else if (select == 4)
        {
            // 기준 노드 뒤 데이터 추가
            printf("찾을 데이터를 입력하세요 :  ");
            long long searchDataAfter;
            scanf("%lld", &searchDataAfter);

            printf("추가할 데이터를 입력하세요 :  ");
            if (scanf("%lld", &data) != 1)
            {
                printf("잘못된 값을 입력 했습니다\n");
                while (getchar() != '\n');
                continue;
            }
            else
            {
                addAfterNode(head, searchDataAfter, data);
                printf("현재 연결 리스트: ");
                printList(head);
                printf("\n");
            }
            system("cls");
        }
        else if (select == 5)
        {
            // 앞 노드 데이터 삭제
            deleteFirstNode(&head);
            if (head != NULL)
            {
                printf("현재 연결 리스트: ");
                printList(head);
                printf("\n");
            }
            system("cls");
        }
        else if (select == 6)
        {
            // 뒤 노드 데이터 삭제
            deleteLastNode(&head);
            if (head != NULL)
            {
                printf("현재 연결 리스트: ");
                printList(head);
                printf("\n");
            }
            system("cls");
        }
        else if (select == 7)
        {
            // 임의 위치 데이터 삭제
            int position = countNodes(head);
            printf("삭제할 위치를 입력하세요: ");
            scanf("%d", &position);

            deleteSearchNode(&head, position);
            if (head != NULL)
            {
                printf("현재 연결 리스트: ");
                printList(head);
                printf("\n\n");
            }
            system("cls");
        }
        else if (select == 8)
        {
            // 모든 노드 데이터 삭제
            deleteALLNode(&head);
            printf("모두 삭제 되었습니다.\n");
            printf("현재 연결 리스트 : ");
            printList(head);
            system("cls");
        }
        else if (select == 9)
        {
            // 임의 노드 데이터 수정
            int position3;
            printf("수정할 노드의 위치를 입력하세요: ");
            scanf_s("%d", &position3);
            ModifyNode(head);
            printf("현재 연결 리스트: ");
            printList(head);
            continue;
            system("cls");
        }
        else if (select == 10)
        {
            // 임의 노드 데이터 값 읽기
            int position2;
            printf("출력할 노드의 위치를 입력하세요: ");
            scanf_s("%d", &position2);

            PrintSearchNode(head, position2);
            printf("현재 연결 리스트: ");
            printList(head);
            continue;
            system("cls");
        }
        else if (select == 11)
        {
            // 노드 순회하기
            printf("현재 연결 리스트: ");
            printList(head);
            printf("\n\n");
            continue;
            system("cls");
        }
        else if (select == 12)
        {
            int position4 = countNodes(head);
            // 단일 선형 탐색
            LinearSearch(head,position4);
            printf("현재 연결 리스트: ");
            printList(head);
            continue;
            system("cls");
        }
        else if (select == 13)
        {
            // 다중 선형 탐색
            int searchData;
            printf("찾을 값을 입력하세요: ");
            scanf("%d", &searchData);

            MultipleLinearSearch(head, searchData);

            printf("현재 연결 리스트: ");
            printList(head);
            continue;
            system("cls");
            }

        else if (select == 14) 
        {
            // 단일 이진 탐색
            bubbleSort(&head);  //정렬 시켜야함 이진 탐색ㅇㅇ
            printf("버블 정렬이 완료되었습니다.\n");

            int searchData;
            printf("찾을 값을 입력하세요: ");
            scanf("%d", &searchData);

            binarySearch(head, searchData);

            printf("현재 연결 리스트: ");
            printList(head);
            continue;
            system("cls");
            }

        else if (select == 15)
        {
            // 단중 이진 탐색
            bubbleSort(&head);  //정렬 시켜야함 이진 탐색ㅇㅇ
            printf("버블 정렬이 완료되었습니다.\n");

            int searchData;
            printf("찾을 값을 입력하세요: ");
            scanf("%d", &searchData);

            multipleBinarySearch(head, searchData);

            printf("현재 연결 리스트: ");
            printList(head);
            continue;
            system("cls");
            
        }
        else if (select == 16)
        {
            // 버블정렬
            bubbleSort(&head);
            printf("버블 정렬이 완료되었습니다.\n");
            printf("현재 연결 리스트: ");
            printList(head);
            continue;
            system("cls");
        }
        else if (select == 17)
        {
            // 삽입정렬
            insertionSort(&head);
            printf("삽입 정렬이 완료되었습니다.\n");
            printf("현재 연결 리스트: ");
            printList(head);
            continue;
            system("cls");
        }
        else if (select == 18)
        {
            // 선택정렬
            selectionSort(&head);
            printf("선택 정렬이 완료되었습니다.\n");
            printf("현재 연결 리스트: ");
            printList(head);
            continue;
            system("cls");
        }
        else if (select == 19)
        {
            // 종료
            break;
        }
        else
        {
            printf("잘못된 선택입니다. 다시 선택하세요.\n");
            //내가 만약에 숫자가 아닌 문자를 집어 넣음 그러면 while문을
            //안쓰면 select는 scanf에서 숫자를 인식을 못해서 값이 없게됌.
            //측 select 변수는 초기화 상태로 남아 있는 거임.
            //그래서 입력 버퍼를 지워주고 사용자에게 다시 입력을 받도록 컨티뉴함.
            while (getchar() != '\n');
            continue;
        }
    }
   
    // 메모리 해제
    // head값이 NULL이 아닐때 동안 계속 while문 실행
    // cur을 head로 초기화해 현재 노드를 가르키도록
    // head를 다음 노드로 이동 후
    // 현재 노드를 메모리 해제함.
    while (head != NULL)
    {
        struct D_Node* cur = head;
        head = head->next;
        free(cur);
    }

    return 0;
}

//1번 앞 노드 데이터 추가
void addFirstNode(D_Node** head, int data) 
{
    D_Node* newNode = (D_Node*)malloc(sizeof(D_Node));  // 새로운 노드 동적 할당

    newNode->data = data;
    newNode->next = *head;                                             // 현재 헤드를 새로운 노드의 다음으로 설정
    *head = newNode;                                                   // 헤드를 새로운 노드로 업데이트
}

// 2번 뒤 노드 데이터 추가
void addLastNode(D_Node** head, int data) {
    // 새로운 노드 동적 할당
    D_Node* newNode = (D_Node*)malloc(sizeof(D_Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        // 연결 리스트가 비어있는 경우
        *head = newNode;
    }
    else {
        // 연결 리스트의 끝까지 이동
        struct Node* cur = *head;
        while (cur->next != NULL) {
            cur = cur->next;
        }

        // 새로운 노드를 연결 리스트의 끝에 추가
        cur->next = newNode;
    }
}

// 3번 기준 노드 앞 데이터 추가
void addBeforeNode(D_Node** head, int searchData, int data) {
    D_Node* cur = *head;
    D_Node* prev = NULL;

    // 노드의 데이터가 searchData와 일치하는 노드를 찾음
    while (cur != NULL && cur->data != searchData) {
        prev = cur;
        cur = cur->next;
    }

    if (cur == NULL) {
        // searchData와 일치하는 노드를 찾지 못한 경우
        printf("일치하는 노드를 찾을 수 없습니다.\n");
    }
    else {
        // 새로운 노드 동적 할당
        D_Node* newNode = (D_Node*)malloc(sizeof(D_Node));
        if (newNode == NULL) {
            printf("메모리 할당 오류\n");
            exit(EXIT_FAILURE);
        }

        newNode->data = data;

        // 이전 노드가 없는 경우 (즉, 찾은 노드가 헤드인 경우)
        if (prev == NULL) {
            newNode->next = *head;
            *head = newNode; // 헤드를 새로운 노드로 업데이트
        }
        else {
            // 이전 노드가 있는 경우
            newNode->next = prev->next;
            prev->next = newNode;
        }
    }
}

// 4번 기준 노드 뒤 데이터 추가
void addAfterNode(D_Node* head, int searchData, int data) {
    D_Node* cur = head;

    // 노드의 데이터가 searchData와 일치하는 노드를 찾음
    while (cur != NULL && cur->data != searchData) {
        cur = cur->next;
    }

    if (cur == NULL) {
        // searchData와 일치하는 노드를 찾지 못한 경우
        printf("일치하는 노드를 찾을 수 없습니다.\n");
    }
    else {
        // 새로운 노드 동적 할당
        D_Node* newNode = (D_Node*)malloc(sizeof(D_Node));
        if (newNode == NULL) {
            printf("메모리 할당 오류\n");
            exit(EXIT_FAILURE);
        }

        newNode->data = data;

        // 새로운 노드를 선택된 노드 뒤에 추가
        newNode->next = cur->next;
        cur->next = newNode;

    }
}

// 5번 앞 노드 데이터 삭제
void deleteFirstNode(D_Node** head) {
    if (*head == NULL) {
        printf("삭제할 노드가 없습니다.\n");
        return;
    }

    D_Node* newHead = (*head)->next;
    free(*head);
    *head = newHead;
}


// 6번 뒤 노드 데이터 삭제
void deleteLastNode(D_Node** head)
{
    if (*head == NULL)
    {
        printf("삭제할 노드가 없습니다.\n");
        return;
    }

    if ((*head)->next == NULL)
    {
        free(*head);
        *head = NULL;
    }
    else
    {
        D_Node* cur = *head;
        while (cur->next->next != NULL)
        {
            cur = cur->next;
        }
        free(cur->next);
        cur->next = NULL;
    }
}

// 7번 임의 위치 데이터 삭제
void deleteSearchNode(D_Node** head, int position)
{
    if (*head == NULL)
    {
        printf("삭제할 노드가 없습니다.\n");
        return;
    }

    if (position == 0)
    {
        // 헤드 노드를 삭제하는 경우
        D_Node* temp = *head;
        *head = (*head)->next;
        free(temp);
        return;
    }

    // 찾을 위치까지 이동
    D_Node* cur = *head;
    D_Node* prev = NULL;
    int count = 0;

    while (cur != NULL && count < position)
    {
        prev = cur;
        cur = cur->next;
        count++;
    }

    if (cur == NULL)
    {
        // 찾을 위치가 리스트의 길이보다 큰 경우
        printf("삭제할 위치를 찾을 수 없습니다.\n");
        return;
    }

    // 찾은 노드를 삭제
    prev->next = cur->next;
    free(cur);
}

// 8번 모든 노드 데이터 삭제
void deleteALLNode(D_Node** head)
{
    D_Node* prev = *head;

    while (*head)
    {
        *head = (*head)->next;

        //printf("삭제할 데이터 값 : %d\n", prev->data);
        free(prev);
        prev = *head;
    }
}


// 9번 임의 노드 데이터 수정 //수정 완료
void ModifyNode(D_Node* head)
{
    int position3 = 0;
    D_Node* cur = head;

    // 노드의 데이터가 position3와 일치하는 노드를 찾음
    int count = 0;
    while (cur != NULL && count < position3)
    {
        cur = cur->next;
        count++;
    }

    if (cur == NULL)
    {
        // position3와 일치하는 노드를 찾지 못한 경우
        printf("일치하는 노드를 찾을 수 없습니다.\n");
    }
    else
    {
        int newData;
        printf("수정할 새로운 데이터를 입력하세요: ");
        scanf("%d", &newData);

        cur->data = newData;
        printf("데이터가 성공적으로 수정되었습니다.\n");
    }
}

// 10번 임의 노드 데이터 값 읽기
void PrintSearchNode(D_Node* head, int position2)
{
    int count = 0;
    while (head != NULL && count < position2)
    {
        head = head->next;
        count++;
    }

    if (head != NULL)
    {
        // 특정 위치의 노드 값을 출력
        printf("특정 위치의 노드 값: %d\n", head->data);
    }
    else
    {
        // 특정 위치를 찾지 못한 경우 처리
        printf("특정 위치를 찾을 수 없습니다.\n");
    }
}

// 11번 순회
void printList(D_Node* head)
{
    // cur을 head로
    struct Node* cur = head;
    /*
    현재 노드가 NULL이 아닐때까지 why?
    연결리스트의 끝은 NULL이기에 NULL이다? 종료 ㄱ
    */
    while (cur != NULL)
    {
        printf("%d ", cur->data);
        cur = cur->next;
    }
    printf("\n");
}

// 12번 단일 선형 탐색?
void LinearSearch(D_Node* head, int position4)
{
    int searchData;
    int count = 0;

    printf("찾을 값을 입력하세요: ");
    scanf("%d", &searchData);

    D_Node* cur = head;

    // 노드의 데이터가 searchData와 일치하는 노드를 찾음
    while (cur != NULL && cur->data != searchData && count < position4)
    {
        cur = cur->next;
        count++;
    }

    if (cur == NULL)
    {
        // searchData와 일치하는 노드를 찾지 못한 경우
        printf("일치하는 노드를 찾을 수 없습니다.\n");
    }
    else
    {
        printf("%d 값의 노드 위치는: %d\n", searchData, count + 1);
    }
}

// 13번 다중 선형 탐색
void MultipleLinearSearch(D_Node* head, int searchData) 
{
    int position = 0;
    int count = 0;


    D_Node* cur = head;

    // 노드의 데이터가 searchData와 일치하는 노드를 찾음
    while (cur != NULL) {
        if (cur->data == searchData) {
            printf("%d 값의 노드 위치는: %d\n", searchData, count + 1);
        }
        cur = cur->next;
        count++;
    }

    if (count == 0) {
        // 일치하는 노드를 찾지 못한 경우
        printf("일치하는 노드를 찾을 수 없습니다.\n");
    }
}

// 14번 단일 이진 탐색
int binarySearch(D_Node* head, int searchData) {
    int count = 0;  // 노드 수 셀 변수
    int position = -1;

    // 리스트의 노드 수 계산
    D_Node* temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }

    // 노드의 데이터가 searchData와 일치하는 노드를 찾음
    int low = 0;
    int high = count - 1;

    while (low <= high) {
        int mid = (low + high) / 2;

        D_Node* cur = head;
        for (int i = 0; i < mid; i++) {
            cur = cur->next;
        }

        if (cur->data == searchData) {
            position = mid;
            break;
        }
        else if (cur->data < searchData) {
            low = mid + 1;
        }
        else {
            high = mid - 1;
        }
    }

    if (position != -1) {
        printf("%d 값의 노드 위치는: %d\n", searchData, position + 1);
    }
    else {
        // searchData와 일치하는 노드를 찾지 못한 경우
        printf("일치하는 노드를 찾을 수 없습니다.\n");
    }

    return position;
}

// 15번 다중 이진 탐색
void multipleBinarySearch(D_Node* head, int searchData) {
    int count = 0;
    int found = 0;

    // 리스트의 노드 수 계산
    D_Node* temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }

    int low = 0;
    int high = count - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        D_Node* cur = head;
        for (int i = 0; i < mid; i++) {
            cur = cur->next;
        }

        if (cur->data == searchData) {
            // 찾은 경우 위치 및 데이터 출력
            printf("%d 값의 노드 위치는: %d, 데이터는: %d\n", searchData, mid + 1, cur->data);
            found = 1;

            // 중복된 값이 있을 수 있으므로 계속해서 왼쪽과 오른쪽으로 이동하며 검색
            int left = mid - 1;
            while (left >= 0) {
                if (cur->data == searchData)
                {
                    printf("%d 값의 노드 위치는: %d, 데이터는: %d\n", searchData, left + 1, cur->data);
                }
                left--;
            }

            int right = mid + 1;
            while (right < count) {
                if (cur->data == searchData)
                {
                    printf("%d 값의 노드 위치는: %d, 데이터는: %d\n", searchData, right + 1, cur->data);
                }
                right++;
            }

            break; // 중복된 값들을 모두 찾았으므로 반복문 종료
        }
        else if (cur->data < searchData) {
            low = mid + 1;
        }
        else {
            high = mid - 1;
        }
    }

    if (!found) {
        // searchData와 일치하는 노드를 찾지 못한 경우
        printf("일치하는 노드를 찾을 수 없습니다.\n");
    }
}

// 정렬된 연결리스트에 새로운 값을 삽입함.
void sortedInsert(D_Node** head, int data) 
{
    D_Node* newNode = (D_Node*)malloc(sizeof(D_Node));
    newNode->data = data;
    newNode->next = NULL;

    // 만약 리스트가 비어있거나 새로운 노드의 데이터가 헤드의 데이터보다 작다면
    // 헤드에 삽입
    if (*head == NULL || (*head)->data >= newNode->data) {
        newNode->next = *head;
        *head = newNode;
    }
    else {
        // 그렇지 않으면 올바른 위치를 찾아 삽입
        D_Node* cur = *head;
        while (cur->next != NULL && cur->next->data < newNode->data) {
            cur = cur->next;
        }
        newNode->next = cur->next;
        cur->next = newNode;
    }
}

// 16번 버블 정렬
void bubbleSort(D_Node** head) 
{
    int swapped;
    D_Node* cur;
    D_Node* last = NULL;

    // 빈 리스트 또는 하나의 노드만 있는 경우 정렬할 필요 없음
    if (*head == NULL || (*head)->next == NULL) {
        return;
    }

    do {
        swapped = 0;
        cur = *head;

        while (cur->next != last) {
            // 현재 노드와 다음 노드를 비교하여 교환
            if (cur->data > cur->next->data) {
                int temp = cur->data;
                cur->data = cur->next->data;
                cur->next->data = temp;
                swapped = 1;
            }

            cur = cur->next;
        }

        last = cur;

    } while (swapped);
}
// 17번 삽입 정렬
void insertionSort(D_Node** head)
{
    D_Node* sorted = NULL; // 정렬된 리스트의 헤드

    while (*head != NULL) {
        D_Node* current = *head;
        *head = (*head)->next;

        sortedInsert(&sorted, current->data);
    }

    // 정렬된 리스트를 원래 리스트로 복사
    *head = sorted;
}

// 18번 선택 정렬
void selectionSort(D_Node** head) 
{
    D_Node* current = *head;
    D_Node* temp = NULL;

    while (current != NULL) {
        // 최솟값을 찾음
        D_Node* minNode = current;
        D_Node* searchNode = current->next;

        while (searchNode != NULL) {
            if (searchNode->data < minNode->data) {
                minNode = searchNode;
            }
            searchNode = searchNode->next;
        }

        // 최솟값과 현재 노드의 데이터 교환
        if (minNode != current) {
            int tempData = current->data;
            current->data = minNode->data;
            minNode->data = tempData;
        }

        current = current->next;
    }
}

int countNodes(D_Node* head) {
    int count = 0;
    D_Node* cur = head;

    while (cur != NULL) {
        count++;
        cur = cur->next;
    }

    return count;
}