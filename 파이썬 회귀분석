import matplotlib.pyplot as plt
import numpy as np
x = np.random.rand(10, 1)
y = 5 * x + 2

plt.scatter(x, y, marker = '+')
print(x, y)
plt.show()

from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plot
import numpy as np
import sklearn

x = np.random.rand(20,1)
x = x * 10 
y = 5 * x + 10

model = LinearRegression()
model.fit()

print('기울기 a : ', model.coef_)
print('y절편 b : ', model.intercept_)

from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plot
import numpy as np
import sklearn

x = np.random.rand(30,2)
x = x * 10 
y = 5 * x + 10

model = LinearRegression()
model.fit(x, y)

print('기울기 a : ', model.coef_)
print('y절편 b : ', model.intercept_)

from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plot
import numpy as np
import sklearn

x = np.random.rand(30,1)
x = x * 10 
y = 5 * x + 10

model = LinearRegression()
model.fit(x, y)

print('기울기 a : ', model.coef_)
print('y절편 b : ', model.intercept_)

from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plot
import numpy as np
import sklearn

x = np.random.rand(10,5)
x = x * 2 
y = 5 * x + 2

model = LinearRegression()
model.fit(x, y)

print('기울기 a : ', model.coef_)
print('y절편 b : ', model.intercept_)

from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plot
import numpy as np
import sklearn

x = np.random.rand(10,1)
x = x * 10 
y = 5 * x + 10
#y값에 오차 5 추가
y=y+5*np.random.rand(10,1)

model = LinearRegression()
model.fit(x, y)
#예측 그래프 만들기?
y_p=model.predict(x)
relation_square = model.score(x,y)

print('기울기 a : ', model.coef_)
print('y절편 b : ', model.intercept_)
print('상관계수 R', relation_square)

plot.scatter(x, y, marker = '+')
plot.scatter(x, y_p, marker = 'o')
plot.show()

from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plot
import numpy as np
import sklearn
import pandas as pd
import openpyxl

data = pd.read_csv('Boston_house.csv')
print(data)

from sklearn.model_selection import train_test_split

X = data[['PTRATIO','RM','AGE']]
y = data[['Target']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

reg = LinearRegression()
reg.fit(X_train, y_train)
y_pred = reg.predict(X_test)
import matplotlib.pyplot as plt
%matplotlib inline

#실제 주택값과 예측한 주택값 간의 상관관계

plt.scatter(y_test, y_pred, alpha=0.4)
plt.xlabel("real price")
plt.ylabel("pre price")
plt.title("LinearRegression")
plt.show()


plt.scatter(data[['PTRATIO']], data[['Target']], alpha=0.4)
plt.show()
reg.coef_

plt.scatter(data[['RM']], data[['Target']], alpha=0.4)
plt.show()
reg.coef_

plt.scatter(data[['AGE']], data[['Target']], alpha=0.4)
plt.show()
reg.coef_

reg.coef_

plt.scatter(data[['PTRATIO']], data[['Target']], alpha=0.4)
plt.show()
reg.coef_

plt.scatter(data[['RM']], data[['Target']], alpha=0.4)
plt.show()
reg.coef_

plt.scatter(data[['AGE']], data[['Target']], alpha=0.4)
plt.show()
reg.coef_

