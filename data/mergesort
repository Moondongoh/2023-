#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void merge(int arr[], int left, int middle, int right) {
    int i, j, k;
    int n1 = middle - left + 1;
    int n2 = right - middle;

    int* L = (int*)malloc(sizeof(int) * n1);
    int* R = (int*)malloc(sizeof(int) * n2);

    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[middle + 1 + j];

    i = 0; 
    j = 0; 
    k = left; 
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }

    free(L);
    free(R);
}

void mergesort(int arr[], int left, int right) {
    if (left < right) {
        int middle = left + (right - left) / 2;

        mergesort(arr, left, middle);
        mergesort(arr, middle + 1, right);

        merge(arr, left, middle, right);
    }
}

void generateRandomArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 1000; 
    }
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    srand(time(NULL));

    int size1 = 1000;
    int* arr1 = (int*)malloc(sizeof(int) * size1);
    if (arr1 == NULL) {
        printf("메모리 할당에 실패하였습니둥.\n");
        return 1;
    }
    generateRandomArray(arr1, size1);

    clock_t start = clock();
    mergesort(arr1, 0, size1 - 1);
    clock_t end = clock();

    double time1 = (double)(end - start) / CLOCKS_PER_SEC;

    printf("%d개에 대한 실행 시간 : %f초 입니다.\n", size1, time1);

    free(arr1);

    int size2 = 10000;
    int* arr2 = (int*)malloc(sizeof(int) * size2);
    if (arr2 == NULL) {
        printf("메모리 할당에 실패하였습니둥.\n");
        return 1;
    }
    generateRandomArray(arr2, size2);

    start = clock();
    mergesort(arr2, 0, size2 - 1);
    end = clock();

    double time2 = (double)(end - start) / CLOCKS_PER_SEC;

    printf("%d개에 대한 실행 시간 : %f초 입니다.\n", size2, time2);

    free(arr2);

    int size3 = 100000;
    int* arr3 = malloc(sizeof(int) * size3);
    if (arr3 == NULL) {
        printf("메모리 할당에 실패하였습니둥.\n");
        return 1;
    }
    generateRandomArray(arr3, size3);

    start = clock();
    mergesort(arr3, 0, size3 - 1);
    end = clock();

    double time3 = (double)(end - start) / CLOCKS_PER_SEC;

    printf("%d개에 대한 실행 시간 : %f초 입니다.\n", size3, time3);

    free(arr3);

    return 0;
}
